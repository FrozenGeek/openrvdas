// A sample file for logger/listener/listen.py demonstrating the recursive
// definition functionality by using a ComposedReader or ComposedWriter.
//
// To run, type:
//
//    logger/listener/listen.py --config_file test/configs/composed_logger.yaml
//
// Dictionary key/value pairs are used as keyword arguments for creating a
// Listener. The keys "reader", "transform" and "writer" are special-cased to
// indicate that the respective entities should be instantiated (recursively,
// if necessary).
{
    // Multiple readers, enclosed in a list.
    "readers": [
        {
            "class": "ComposedReader",
            "kwargs": {   // initialization kwargs
                          "readers": {
                              "class": "TextFileReader",
                              "kwargs": {   // initialization kwargs
                                            "file_spec": "LICENSE",
                                            "interval": 1
                                        }
                          },
                          "transforms": {
                              "class": "PrefixTransform",
                              "kwargs": {
                                  "prefix": "composed:"
                              }
                          }
                      }
        },
        {
            "class": "TextFileReader",
            "kwargs": {   // initialization kwargs
                          "file_spec": "README.md",
                          "interval": 0.5
                      }
        }    
    ],
    "transforms": [
    ],
    
    // Only a single writer, not enclosed in a list, to demonstrate/test
    // that lists are only needed if we've got multiple components.
    "writers": {
        "class": "TextFileWriter",
        "kwargs": {   // initialization kwargs
                      // no filename, so write to stdout
                  }
    },
    "check_format": false
}
